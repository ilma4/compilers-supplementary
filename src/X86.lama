-- X86 codegeneration interface
-- We use stack machine programs as intermediate representation
import Fun;
import SM;
import Collection;
import List;
import Manifest;
import Buffer;

-- Assembler language interface
-- The registers: 
var regs = ["%ebx", "%ecx", "%esi", "%edi", "%eax", "%edx", "%ebp", "%esp"];

-- We can not freely operate with all register; only with 4 by now
var nRegs = regs.length - 5;

-- For convenience we define the following synonyms for the registers: 
var ebx = R (0),
    ecx = R (1),
    esi = R (2),
    edi = R (3),
    eax = R (4),
    edx = R (5),
    ebp = R (6),
    esp = R (7);

-- We need to know the word size to calculate offsets correctly
var wordSize = 4;

-- We need to distinguish the following operand types: 
--    R (int)       -- hard register                    
--    S (int)       -- a position on the hardware stack 
--    M (string)    -- a named memory location          
--    L (int)       -- an immediate operand
--    I (int, opnd) -- an indirect operand with offset

-- Some x86 instruction (we do not need all of them):
--   Mov   (opnd, opnd)         -- copies a value from the first to the second operand  
--   Lea   (opnd, opnd)         -- loads an address of the first operand into the second
--   Binop (string, opnd, opnd) -- makes a binary operation; note, the first operand   
--                                 designates x86 operator, not the source language one
--   IDiv  (opnd)               -- x86 integer division, see instruction set reference 
--   Cltd                       -- see instruction set reference           
--   Set   (string, string)     -- sets a value from flags; the first operand is the   
--                                 suffix, which determines the value being set, the
--                                 the second --- (sub)register name
--   Jmp   (string)             -- unconditional jump to a label
--   CJmp  (string, string)     -- conditional jump to a label
--   Label (string)             -- a label
--   Push  (opnd)               -- pushes the operand on the hardware stack
--   Pop   (opnd)               -- pops from the hardware stack to the operand
--   Call  (string)             -- calls a function by its name 
--   Ret                        -- returns from a function
--   Meta  (string)             -- metainformation (declarations, etc.)
--
--   Dec   (opnd)               -- arithmetic correction: decrement  
--   Inc   (opnd)               -- increment
--   Or1   (opnd)               -- arithmetic correction: or 0x0001                     
--   Sal1  (opnd)               -- arithmetic correction: shl 1           
--   Sar1  (opnd)               -- arithmetic correction: shr 1

-- Machine instruction printer
fun insnString (insn) {
  
  fun binopString (op) {
    case op of
      "+"   -> "addl"
    | "-"   -> "subl"
    | "*"   -> "imull"
    | "&&"  -> "andl"
    | "!!"  -> "orl" 
    | "^"   -> "xorl"
    | "cmp" -> "cmpl"
    esac
  }

  fun opndString (opnd) {
    case opnd of
      R (i)    -> regs [i]
    | S (i)    ->  if i >= 0
                   then sprintf ("-%d(%%ebp)", (i+1) * wordSize)
                   else sprintf ("%d(%%ebp)", 8 + (-1-i) * wordSize)
                   fi

    | M (x)    -> x
    | L (i)    -> sprintf ("$%d", i)
    | I (0, x) -> sprintf ("(%s)", opndString (x))
    | I (n, x) -> sprintf ("%d(%s)", n, opndString (x))
    esac
  }

  case insn of
    Cltd               -> "\tcltd\n"
  | Set   (suf, s)     -> sprintf ("\tset%s\t%s\n", suf, s)
  | IDiv  (s1)         -> sprintf ("\tidivl\t%s\n", opndString (s1))
  | Binop (op, s1, s2) -> sprintf ("\t%s\t%s,\t%s\n", binopString (op), opndString (s1), opndString (s2))
  | Lea   (s1, s2)     -> sprintf ("\tleal\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Mov   (s1, s2)     -> sprintf ("\tmovl\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Push  (s)          -> sprintf ("\tpushl\t%s\n", opndString (s))
  | Pop   (s)          -> sprintf ("\tpopl\t%s\n", opndString (s))
  | Ret                -> "\tret\n"
  | Call  (p)          -> sprintf ("\tcall\t%s\n", p)
  | Label (l)          -> sprintf ("%s:\n", l)
  | Jmp   (l)          -> sprintf ("\tjmp\t%s\n", l)
  | CJmp  (c, l)       -> sprintf ("\tj%s\t%s\n", c, l)
  | Meta  (m)          -> m
  | Dec   (s)          -> sprintf ("\tdecl\t%s\n", opndString (s))
  | Inc   (s)          -> sprintf ("\tincl\t%s\n", opndString (s))
  | Or1   (s)          -> sprintf ("\torl\t$0x0001,\t%s\n", opndString (s))
  | Sal1  (s)          -> sprintf ("\tsall\t%s\n", opndString (s))
  | Sar1  (s)          -> sprintf ("\tsarl\t%s\n", opndString (s))    
  esac
}

-- Environment for symbolic interpreter
-- An environment holds
--    a symbolic stack
--    a maximal stack depth reached so far
--    a set of global variable names
--    a barrier condition (set up right after an unconditional jump is interpreter)
--    a stack map which maps labels to symbolic stacks

fun makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals) {
  -- Returns an internal name for a global variable
  fun globalName (name) {
    "global_" ++ name
  }

  -- Returns a string representation of the environment
  fun envString () {
    sprintf ("Stack     : %s\nStackSlots: %d\nGlobals   : %s\n", stack.string, stackSlots, elements (globals).string)
  }
  
  -- Allocates a new position on the symbolic stack;
  -- returns a pair: a location for allocated item and
  -- an updated environment
  fun allocate () {
    case 
      case stack of
        {}        -> [ebx, 0]
      | S (n) : _ -> [S (n+1), n+2]
      | R (n) : _ -> if n < nRegs then [R (n+1), stackSlots] else [S (nLocals), nLocals + 1] fi
      | _         -> [S (0), 1]
      esac
    of [x, n] -> [x, makeEnv (x : stack, if n > stackSlots then n else stackSlots fi, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]esac
  }

  -- Pushes an item on the symbolic state; returns an updated envirtonment
  fun push (y) {
    makeEnv (y : stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)
  }

  -- Pops one item from the symbolic stack; returns a pair: a popped
  -- item and an updated environment
  fun pop () {
    case stack of
      x : stack -> [x, makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]
    esac
  }

  -- Pops two items from the symbolic stack; returns a triple:
  -- popped items and an undated environment
  fun pop2 () {
    case stack of
      x : y : stack -> [x, y, makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]
    esac
  }

  -- Peeks the top of the symbolic stack
  fun peek () {
    stack.fst
  }
  
  -- Adds a global variable; returns an updated environment
  fun addGlobal (name) {
    makeEnv (stack, stackSlots, addSet (globals, globalName (name)), strings, stringIndex, barrier, stackMap, fLabel, nLocals)
  }

  -- References an allocation
  fun loc (alloc) {
    case alloc of
      Glb (x) -> M (globalName (x))
    | Arg (i) -> S (-1-i)
    | Loc (i) -> S (i)
    esac
  }
  
  -- Gets a list of global variables from the environment
  fun getGlobals () {
    globals.elements
  }

  -- Gets a maximal stack size from the environment
  fun getStackSize () {
    stackSlots
  }

  -- Gets barrier condition
  fun isBarrier () {
    barrier
  }

  -- Sets barrier condition
  fun setBarrier () {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, true, stackMap, fLabel, nLocals)
  }

  -- Associates the current symbolic state with a label
  fun setStack (l) {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, false, addMap (stackMap, l, stack), fLabel, nLocals)
  }

  -- Retrieves a stack for a label
  fun retrieveStack (l) {
    case findMap (stackMap, l) of
      None         -> makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nLocals)
    | Some (stack) -> makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nLocals)
    esac
  }

  -- Sets the label of current function
  fun enterFunction (fLabel, nL) {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nL)
  }

  -- Gets the label of current function
  fun currentFunction () {
    fLabel
  }

  -- Gets the list of live registers past given symbolic stack depth
  fun liveRegisters (depth) {
    fun inner (d, acc, st) {
      case st of
        {}             -> acc
      | (r@R (_)) : tl -> inner (d+1, if d >= depth then r : acc else acc fi, tl)
      | _         : tl -> inner (d+1, acc, tl)
      esac
    }

    inner (0, {}, stack)
  }

  -- Registers a string literal and assigns it a name
  fun addString (s) {
    var escaped = makeString ((s.length + 1) * 2), i = 0, j = 0, name = sprintf ("string_%d", stringIndex);

    for skip, i < s.length, i := i+1 do
      case s[i] of
        '"'  -> escaped [j] :='"'; escaped [j+1] := '"'; j := j+2
      | '\n' -> escaped [j] :='\'; escaped [j+1] := 'n'; j := j+2
      | '\t' -> escaped [j] :='\'; escaped [j+1] := 't'; j := j+2
      | c    -> escaped [j] := c; j := j+1
      esac
    od;
    
    [makeEnv (stack, stackSlots, globals, addSet (strings, [name, substring (escaped, 0, j)]), stringIndex+1, false, stackMap, fLabel, nLocals),
     name]
  }

  -- Gets a list of all string literals and their names
  fun getStrings () {
    elements (strings)
  }

  -- Gets a local static size for the current function
  fun staticSize () {
    nLocals + stackSlots
  }
  
  [envString,
   allocate,
   push,
   pop,
   pop2,
   addGlobal,
   loc,
   getGlobals,
   getStackSize,
   peek,
   isBarrier,
   setBarrier,
   setStack,
   retrieveStack,
   enterFunction,
   currentFunction,
   liveRegisters,
   addString,
   getStrings,
   staticSize]
}

-- Exported accessors
fun envString (env) {
  env [0] ()
}

fun allocate (env) {
  env [1] ()
}

fun push (env, x) {
  env [2] (x)
}

fun pop (env) {
  env [3] ()
}

fun pop2 (env) {
  env [4] ()
}

fun addGlobal (env, name) {
  env [5] (name)
}

fun loc (env, name) {
  env [6] (name)
}

fun getGlobals (env) {
  env [7] ()
}

fun getStackSize (env) {
  env [8] ()
}

fun peek (env) {
  env [9] ()
}

fun isBarrier (env) {
  env [10] ()
}

fun setBarrier (env) {
  env [11] ()
}

fun setStack (env, l) {
  env [12] (l)
}

fun retrieveStack (env, l) {
  env [13] (l)
}

fun enterFunction (env, fLabel, nA) {
  env [14] (fLabel, nA)
}

fun currentFunction (env) {
  env [15] ()
}

fun liveRegisters (env, depth) {
  env [16] (depth)
}

fun addString (env, s) {
  env [17] (s)
}

fun getStrings (env) {
  env [18] ()
}

fun staticSize (env) {
  env [19] ()
}

-- Creates an initial environment
fun initEnv () {
  makeEnv ({}, 0, emptySet (compare), emptySet (compare), 0, false, emptyMap (compare), "", 0)
}

-- Codegeneration helper functions
-- Generates code section
fun codeSection (text) {
  singletonBuffer (Meta ("\t.text\n")) <+> text
}

-- Generates data section
fun dataSection (text) {
  singletonBuffer (Meta ("\t.data\n")) <+> text
}

-- Generates integer definition
fun intDef (name) {
  Meta (sprintf ("%s:\t.int\t0\n", name))
}

-- Generates string definition
fun stringDef ([name, vl]) {
  Meta (sprintf ("%s:\t.string\t""%s""\n", name, vl))
}

-- Generates function prologue
fun prologue (fLabel) {
  singletonBuffer (Push  (ebp)) <+
  Mov   (esp, ebp) <+
  Binop ("-", M (sprintf ("$%s_SIZE", fLabel)), esp)  
}

-- Generates function epilogue
fun epilogue (env) {
  var metaDef = Meta (sprintf ("\t.set\t%s_SIZE,\t%d\n", env.currentFunction, env.staticSize * wordSize));

  if compare (env.currentFunction, "main") == 0
  then [env, singletonBuffer (Mov (ebp, esp)) <+ Pop (ebp) <+ Binop ("^", eax, eax) <+ Ret <+ metaDef]
  else case env.pop of
         [y, env] -> [env, singletonBuffer (Mov (ebp, esp)) <+ Pop (ebp) <+ Mov (y, eax) <+ Ret <+ metaDef]
       esac
  fi
}

-- Checks if an operand resides on a stack
fun stackOpnd (opnd) {
  case opnd of
    S (_) -> true
  | _     -> false
  esac      
}

-- Checks if an operand resides in memory
fun memOpnd (opnd) {
  case opnd of
    S (_) -> true
  | M (_) -> true
  | _     -> false
  esac
}

-- Generates a move between locations, using
-- intermediate register if needed
fun move (from, to) {
  if memOpnd (from) && memOpnd (to)
  then singletonBuffer (Mov (from, eax)) <+ Mov (eax, to)
  else singletonBuffer (Mov (from, to))
  fi
}


fun moveBkp(from, to, buff){
  if memOpnd(buff) then failure("buff must be register. Got: %s\n", buff.string) fi;

  if memOpnd (from) && memOpnd (to)
  then singletonBuffer (Mov (from, buff)) <+ Mov (buff, to)
  else singletonBuffer (Mov (from, to))
  fi

}

-- Gets a suffix for Set instruction from
-- source language comparison operator
fun suffix (op) {
  case op of
    "<"  -> "l"
  | "<=" -> "le"
  | "==" -> "e"
  | "!=" -> "ne"
  | ">=" -> "ge"
  | ">"  -> "g"
  esac
}

-- Boxes an immediate value
fun makeBox (n) {
  n * 2 + 1
}

-- Generates a fixednum representation
-- conversion
fun toFixedNum (r) {
  singletonBuffer (Sal1 (r)) <+ Or1 (r)
}

fun fromFixedNum(r) {
  singletonBuffer (Sar1 (r)) 
}

fun popN(env, n){
  if n <= 0 
    then [{}, env]
    else 
      case pop(env) of [v, env] ->
        case popN(env, n - 1) of [res, env] ->
          [v : res, env]
        esac
      esac
  fi
}

fun builtinLabelFix(label){
  if label[0] == '$' 
    then "L" ++ substring(label, 1, length(label) - 1) 
    else label
  fi
}

fun allocateN(env, n){
  fun helper(env, n, acc){
    if n <= 0
      then [env, reverse(acc)]
      else 
        case allocate(env) of [dst, env] ->
          helper(env, n - 1, dst : acc)
        esac
    fi
  }

  helper(env, n, {})
}

-- Compiles stack machine code into a list of x86 instructions. Takes an environment
-- and stack machine code, returns an updated environment and x86 code.
fun compile (env, code) {  
  fun compile (env, code) {
    foldl (
      fun ([env, scode], i) {
        var code = scode <+ Meta ("# " ++ showSMInsn (i) ++ "\n");

        case i of
        LDA (x) -> 
            case allocateN(env, 2) of [env, {dst1, dst2}] -> 
              [env, 
              if memOpnd(dst1) 
                then code <+ Lea(loc(env, x), eax) <+> move(eax, dst1)
                else code <+ Lea(env.loc(x), dst1)
              fi <+> move(dst1, dst2)
              ]
            esac 

        | STI    -> 
            case env.pop2 of [v, x, env] ->
                -- [push(env, x), code <+> move(v, I(0, x)) <+> move(v, x)]
              if memOpnd(x)
                then [push(env, x), code <+> move(x, eax) <+> moveBkp(v, I(0, eax), edx) <+> move(v, x)]
                else [push(env, x), code <+> move(v, I(0, x)) <+> move(v, x)]
              fi
            esac

        | CONST (n) -> 
            case allocate(env) of 
              [dst, env] -> [env, code <+> move(L(makeBox(n)), dst)]
            esac

        | ST (x) ->
            case peek(env) of
	            src -> [env, code <+> move (src, loc(env, x))]
	          esac

        | LD (x) ->
            case allocate(env) of
	            [dst, env] -> [env, code <+> move (loc(env, x), dst)]
	          esac

        | DUP    -> case peek(env) of src -> 
                      case env.allocate of [dst, env] -> 
                        [env, code <+> move(src, dst)]
                      esac 
                    esac

        | DROP   -> case pop(env) of
                      [_, env] -> [env, code]
                    esac

        | BINOP (op) -> compileBinop([env, code], op)

        | JMP (label) -> 
              [setBarrier(setStack(env, label)), code <+ Jmp(label)] 

        | LABEL (label) -> case if isBarrier(env) then retrieveStack(env, label) else env fi of
                            env -> [env, code <+ Label(label)]
                          esac

        | CJMP (NZ, label) -> 
            case pop(env) of
              [s, env] -> [setStack(env, label), code <+ cmpWithZeroInsn(s) <+ CJmp("ne", label)]
            esac

        | GLOBAL(x) -> --printf("compiling Global x: %s\n", x); 
              [addGlobal(env, x), code]

        | BEGIN (name, numArgs, numLocals) -> 
            [enterFunction(env, name, numLocals), code <+> prologue(name)]
        
        | END -> case epilogue(env) of 
                    [env, epil] -> [env, code <+> epil]
                 esac

        | CALL (label, numArgs) -> 
            case compileCall(env, builtinLabelFix(label), numArgs) of 
              [env, call] -> [env, code <+> call]
            esac
        
        | BUILTIN (label, numArgs) ->
            case compileCall(env, "L" ++ label, numArgs) of 
              [env, call] -> [env, code <+> call]
            esac

        | STRING (s) -> 
            case addString(env, s) of [env, name] -> 
              case compileCall(push(env, M("$" ++ name)), "Bstring", 1) of [env, call] ->
                  [env, code <+> call]
              esac
            esac

        | ELEM -> 
            case compileCall(env, "Belem", 2) of 
              [env, call] -> [env, code <+> call]
            esac

        | STA -> 
            case compileCall(env, "Bsta", 3) of 
              [env, call] -> [env, code <+> call]
            esac
        
        | ARRAY (n) -> 
            case compileArrayCall(env, n) of [env, call] ->
              [env, code <+> call]
            esac

        | SEXP (s, n) -> 
            case compileSexpCall(env, s, n) of [env, call] ->
              [env, code <+> call]
            esac
               
        | _ -> failure ("codegeneration for instruction %s is not yet implemented\n", i.string)
      esac
      }, [env, emptyBuffer ()], code)
  }

  compile (env, code) 
}

fun compileSexpCall(env, s, numElems){
  case liveRegisters(env, numElems) of liveRegs ->
    case popN(env, numElems) of [args, env] ->
      case allocate(env) of [res, env] ->
        case  listBuffer(map(fun(reg){Push(reg)}, reverse(liveRegs))) 
              <+  Push(L(tagHash(s)))
              <+> listBuffer(map(fun(arg){Push(arg)}, args)) 
              <+  Push(L(makeBox(numElems)))
              <+  Call("Barray") <+> move(eax, res) 
              <+  Binop("+", L((numElems + 2) * wordSize), esp) 
              <+> listBuffer(map(fun(r){ Pop(r) }, liveRegs)) 
          of code ->
              [env, code]
        esac
      esac
    esac
  esac
}

fun compileArrayCall(env, numElems){
  case liveRegisters(env, numElems) of liveRegs ->
    case popN(env, numElems) of [args, env] ->
      case allocate(env) of [res, env] ->
        case  listBuffer(map(fun(reg){Push(reg)}, reverse(liveRegs))) 
              <+> listBuffer(map(fun(arg){Push(arg)}, args)) 
              <+  Push(L(makeBox(numElems)))
              <+  Call("Barray") <+> move(eax, res) 
              <+  Binop("+", L((numElems + 1) * wordSize), esp) 
              <+> listBuffer(map(fun(r){ Pop(r) }, liveRegs)) 
          of code ->
              [env, code]
        esac
      esac
    esac
  esac
}

fun compileCall(env, label, numArgs){
  case liveRegisters(env, numArgs) of liveRegs ->
    case popN(env, numArgs) of [args, env] ->
      case allocate(env) of [res, env] ->
        case  listBuffer(map(fun(reg){Push(reg)}, reverse(liveRegs))) 
              <+> listBuffer(map(fun(arg){Push(arg)}, args)) 
              <+  Call(label) <+> move(eax, res) 
              <+  Binop("+", L(numArgs * wordSize), esp) 
              <+> listBuffer(map(fun(r){ Pop(r) }, liveRegs)) 
          of code ->
              [env, code]
        esac
      esac
    esac
  esac
}

fun compileBinop([env, code], op) {
  -- printf("Compiling binop: %s. env: %s. code: %s", s.string, env.string, code.string);
  case pop2(env) of [b, a, env] -> [push(env, a),
    case op of 
      "+" -> code <+> compileSum(b, a)
    | "-" -> code <+> compileMinus(b, a)
    | "*" -> code <+> compileMul(b, a)

    | "/" -> code <+> compileDivMod(op, b, a)
    | "%" -> code <+> compileDivMod(op, b, a)

    | "!!" -> code <+> compileOr(b, a)
    | "&&" -> code <+> compileAnd(b, a)

    | "<"  -> code <+> compileCompare(op, b, a)
    | ">"  -> code <+> compileCompare(op, b, a)
    | "<=" -> code <+> compileCompare(op, b, a)
    | ">=" -> code <+> compileCompare(op, b, a)
    | "==" -> code <+> compileCompare(op, b, a)
    | "!=" -> code <+> compileCompare(op, b, a)
    | _ -> failure("codegeneration for BINOP %s is not yet implemented\n", op.string)
    esac
    ]
  esac 
}

fun cmpWithZeroInsn(loc){
  Binop("cmp", L(makeBox(0)), loc)
}

fun isRegister(loc){
  case loc of
    R(_) -> true
  | _ -> false
  esac
}

fun compileDivMod(op, b, a){
      fromFixedNum(a) 
  <+> fromFixedNum(b) 
  <+  Mov(a, eax) 
  <+  Cltd 
  <+  IDiv(b) 
  <+  case op of
        "/" -> Mov(eax, a)
      | "%" -> Mov(edx, a)
      esac 
  <+> toFixedNum(a)
}

fun compileOr(b, a){
  fromFixedNum(b) <+>
  fromFixedNum(a) <+>
    if isRegister(a) !! isRegister(b) then 
      singletonBuffer(Binop("^", eax, eax)) <+ Binop("!!", b, a) <+ Set("ne", "%al") 
    else
      singletonBuffer(Mov(a, eax)) <+ Binop("!!",  b, eax) <+ Set("ne", "%al") <+ Binop("&&", L(1), eax) 
    fi <+>
  toFixedNum(eax) <+
  Mov(eax, a) 
}

fun compileAnd(b, a){
  emptyBuffer() <+ 
  Binop("^", eax, eax) <+ 
  cmpWithZeroInsn(a) <+ 
  Set("ne", "%al") <+ 
  cmpWithZeroInsn(b) <+ 
  Set("ne", "%dl") <+ 
  Binop("&&", edx, eax) <+>
  toFixedNum(eax) <+>
  move(eax, a)
}

fun compileSum(b, a){
  if isRegister(a) !! isRegister(b) then 
    emptyBuffer() <+ Binop("+", b, a) 
  else
    emptyBuffer() <+ Mov(a, eax) <+ Binop("+", b, eax) <+ Mov(eax, a)
  fi <+ Dec(a)
}

fun compileMinus(b, a){
  if isRegister(a) !! isRegister(b) then 
    emptyBuffer() <+ Binop("-", b, a) 
  else
    emptyBuffer() <+ Mov(a, eax) <+ Binop("-", b, eax) <+ Mov(eax, a)
  fi <+ Inc(a)
}

fun compileMul(b, a){
  fromFixedNum(a) <+>
  fromFixedNum(b) <+>
  if isRegister(a) !! isRegister(b) then 
    singletonBuffer(Binop("*", b, a))
  else
    singletonBuffer(Mov(a, eax)) <+ Binop("*", b, eax) <+ Mov(eax, a)
  fi <+>
  toFixedNum(a)
}

fun compileCompare(op, b, a) {
  if isRegister(a) !! isRegister(b) then
    singletonBuffer(Binop("^", eax, eax)) <+ Binop("cmp", b, a) <+ Set(suffix(op), "%al") 
  else
    singletonBuffer(Mov(a, eax)) <+ Binop("cmp", b, eax) <+ Set(suffix(op), "%al") <+ Binop("&&", L(1), eax) 
  fi
  <+> toFixedNum(eax)
  <+> move(eax, a)
}

-- A top-level codegeneration function. Takes a driver's environment and a stack machine program,
-- compiles the program into machine code, and compiles the machine code into an executable
public fun compileX86 (args, code) {
  case compile (initEnv (), code) of
    [env, code] ->
       var asmFile = args.getBaseName ++ ".s",
           runtime = case getEnv ("LAMA_RUNTIME") of
                       #val -> "../runtime/"
                     | path -> path
                     esac ++ "/runtime.o";

       fwrite (asmFile,
               map (insnString, 
                    getBuffer $ 
                      singletonBuffer (Meta ("\t.global\tmain\n")) <+>
                      dataSection (listBuffer (map (intDef   , getGlobals (env))) <+>
                                   listBuffer (map (stringDef, getStrings (env)))) <+>
                      codeSection (code)                   
                    ).stringcat);
                    
       system ({"gcc -g -m32 -o ", args.getBaseName, " ", runtime, " ", asmFile}.stringcat)
  esac
}
