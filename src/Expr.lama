-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;


-- my helper functions
var debug = false;

fun also(v, callback){
  callback(v);
  v
}

fun alsoDebug(v, callback){
  onDebug(callback);
  v
}

fun onDebug(callback){
  if debug then callback() fi
}
-- 

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


fun setupForCall(state, args, names){
  foldl(
      fun(state, [x, v]){state <- [x, Val(v)]}, 
      addNames(enterScope(enterFunction(state)), names), 
      zip(names, args)
  )
}

fun addDefs(state, defs){
  foldl(
    fun(state, def) { 
      case def of 
        Var (vars) -> addNames(state, vars)
      | Fun (name, args, body)    -> addFunction(state, name, args, body)
      esac
    }, 
    state, 
    defs)
}

fun eval (cfg@[state, world], expr) {
  onDebug(fun(){printf("In eval, expr: %s, world: %s\n", expr.string, world.string)});
  case expr of
  Seq (left, right) -> 
      case evalList(cfg, {left, right}) of 
        [cfg, {_, r}] -> [cfg, r]
      esac

  | Ref (x) -> [cfg, case lookupVal(state, x) of Val (_) -> x esac]
  | Var (x) -> [cfg, case lookupVal(state, x) of Val (x) -> x esac]   
  | Ignore (e) -> case eval(cfg, e) of [cfg, _] -> [cfg, Unit] esac
  | Assn (x, e) -> 
      case eval(cfg, x) of [cfg, x] -> 
        case eval(cfg, e) of [[state, world], v] -> 
          case x of 
            [x, i] -> x[i] := v; [cfg, v]
          | x -> [[state <- [x, Val(v)], world], v]
          esac
        esac 
      esac

  | Const (n) -> [cfg, n]
  | Binop (op, l, r) -> 
      case evalList(cfg, {l, r}) of 
        [cfg, {l, r}] -> [cfg, evalOp(op, l, r)]
      esac

  | While (e, s) -> 
      case eval(cfg, e) of [cfg, v] -> 
        if v then 
          case eval(cfg, s) of [cfg, _] -> eval(cfg, expr) esac
        else
          [cfg, Unit]
        fi
      esac

  | DoWhile(e, s) -> 
      case evalList(cfg, {s, While(e, s)}) of [cfg, _] ->
        [cfg, Unit]
      esac

  | If (e, s1, s2) -> 
      case eval(cfg, e) of [cfg, v] -> 
        if v 
          then eval(cfg, s1)
          else eval(cfg, s2)
        fi
      esac

  | Skip -> [cfg, Unit]

  | Call (name, args) -> 
      case lookupFun(state, name) of Fun (names, body) -> 
        case evalList(cfg, args) of [[state, world], args] -> 
          case body of 
            External ->
              case evalBuiltin(name, args, world) of [res, world] ->
                [[state, world], res]
              esac

          | _ ->
            case setupForCall(state, args, names) of callState ->
              case eval([callState, world], body) of [[callState, world], res] -> 
                case getGlobal(callState) of globalState ->
                  [[leaveFunction(state, globalState), world], res]
                esac 
              esac 
            esac 
          esac
        esac 
      esac

  | Scope (defs, body) -> 
      case addDefs(enterScope(state), defs) of 
        state -> 
          case eval([state, world], body) of 
            [[state, world], res] -> [[leaveScope(state), world], res]
          esac 
      esac
    
  | Set (name, e) -> 
      case eval(cfg, e) of [cfg@[state, world], res] -> 
        [[state <- [name, Val(res)], world], res]
      esac

  | Builtin (name, args) -> 
      case evalList(cfg, args) of [[state, world], args] -> 
        case evalBuiltin(name, args, world) of [res, world] ->
          [[state, world], res]
        esac
      esac

  | String (s) -> [cfg, s]
  | Elem (aExpr, iExpr) -> 
      case evalList(cfg, {aExpr, iExpr}) of [cfg@[state, world], {a, i}] ->
        case a of 
          Sexp(_, vals) -> [cfg, vals[i]]
        | _ ->  [cfg, a[i]]
        esac
      esac

  | ElemRef (aExpr, iExpr) -> 
      case evalList(cfg, {aExpr, iExpr}) of [cfg@[state, world], {a, i}] ->
        case a of 
          Sexp(_, vals) -> [cfg, [vals, i]]
        | _ ->  [cfg, [a, i]]
        esac
      esac

  | Array (exps) -> 
      case evalList(cfg, exps) of [cfg@[state, world], vals] ->
        [cfg, listArray(vals)]
      esac

  | Sexp (tag, exps) -> 
      case evalList(cfg, exps) of [cfg, vals] ->
        [cfg, Sexp(tagHash(tag), listArray(vals))]
      esac

  | expr -> failure ("evalExpr is unimplemented for %s\n", expr.string)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
